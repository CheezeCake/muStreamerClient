// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `server.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Player;

public interface IMusicServerPrx extends Ice.ObjectPrx
{
    public void add(Song s)
        throws Error;

    public void add(Song s, java.util.Map<String, String> __ctx)
        throws Error;

    public Ice.AsyncResult begin_add(Song s);

    public Ice.AsyncResult begin_add(Song s, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_add(Song s, Ice.Callback __cb);

    public Ice.AsyncResult begin_add(Song s, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_add(Song s, Callback_IMusicServer_add __cb);

    public Ice.AsyncResult begin_add(Song s, java.util.Map<String, String> __ctx, Callback_IMusicServer_add __cb);

    public void end_add(Ice.AsyncResult __result)
        throws Error;

    public void remove(String path)
        throws Error;

    public void remove(String path, java.util.Map<String, String> __ctx)
        throws Error;

    public Ice.AsyncResult begin_remove(String path);

    public Ice.AsyncResult begin_remove(String path, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_remove(String path, Ice.Callback __cb);

    public Ice.AsyncResult begin_remove(String path, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_remove(String path, Callback_IMusicServer_remove __cb);

    public Ice.AsyncResult begin_remove(String path, java.util.Map<String, String> __ctx, Callback_IMusicServer_remove __cb);

    public void end_remove(Ice.AsyncResult __result)
        throws Error;

    public Song[] find(String s);

    public Song[] find(String s, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_find(String s);

    public Ice.AsyncResult begin_find(String s, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_find(String s, Ice.Callback __cb);

    public Ice.AsyncResult begin_find(String s, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_find(String s, Callback_IMusicServer_find __cb);

    public Ice.AsyncResult begin_find(String s, java.util.Map<String, String> __ctx, Callback_IMusicServer_find __cb);

    public Song[] end_find(Ice.AsyncResult __result);

    public StreamToken setupStreaming(String path, String clientIP, String clientPort);

    public StreamToken setupStreaming(String path, String clientIP, String clientPort, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setupStreaming(String path, String clientIP, String clientPort);

    public Ice.AsyncResult begin_setupStreaming(String path, String clientIP, String clientPort, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setupStreaming(String path, String clientIP, String clientPort, Ice.Callback __cb);

    public Ice.AsyncResult begin_setupStreaming(String path, String clientIP, String clientPort, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_setupStreaming(String path, String clientIP, String clientPort, Callback_IMusicServer_setupStreaming __cb);

    public Ice.AsyncResult begin_setupStreaming(String path, String clientIP, String clientPort, java.util.Map<String, String> __ctx, Callback_IMusicServer_setupStreaming __cb);

    public StreamToken end_setupStreaming(Ice.AsyncResult __result);

    public void play(StreamToken token);

    public void play(StreamToken token, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_play(StreamToken token);

    public Ice.AsyncResult begin_play(StreamToken token, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_play(StreamToken token, Ice.Callback __cb);

    public Ice.AsyncResult begin_play(StreamToken token, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_play(StreamToken token, Callback_IMusicServer_play __cb);

    public Ice.AsyncResult begin_play(StreamToken token, java.util.Map<String, String> __ctx, Callback_IMusicServer_play __cb);

    public void end_play(Ice.AsyncResult __result);

    public void stop(StreamToken token);

    public void stop(StreamToken token, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_stop(StreamToken token);

    public Ice.AsyncResult begin_stop(StreamToken token, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_stop(StreamToken token, Ice.Callback __cb);

    public Ice.AsyncResult begin_stop(StreamToken token, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_stop(StreamToken token, Callback_IMusicServer_stop __cb);

    public Ice.AsyncResult begin_stop(StreamToken token, java.util.Map<String, String> __ctx, Callback_IMusicServer_stop __cb);

    public void end_stop(Ice.AsyncResult __result);
}
